// Code generated by mockery v2.52.2. DO NOT EDIT.

package pkg

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

// MockWatcherProcessor is an autogenerated mock type for the WatcherProcessor type
type MockWatcherProcessor struct {
	mock.Mock
}

type MockWatcherProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWatcherProcessor) EXPECT() *MockWatcherProcessor_Expecter {
	return &MockWatcherProcessor_Expecter{mock: &_m.Mock}
}

// Filter provides a mock function with given fields: ctx, oldObj, newObj
func (_m *MockWatcherProcessor) Filter(ctx context.Context, oldObj *unstructured.Unstructured, newObj *unstructured.Unstructured) (bool, error) {
	ret := _m.Called(ctx, oldObj, newObj)

	if len(ret) == 0 {
		panic("no return value specified for Filter")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, *unstructured.Unstructured) (bool, error)); ok {
		return rf(ctx, oldObj, newObj)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, *unstructured.Unstructured) bool); ok {
		r0 = rf(ctx, oldObj, newObj)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *unstructured.Unstructured, *unstructured.Unstructured) error); ok {
		r1 = rf(ctx, oldObj, newObj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWatcherProcessor_Filter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Filter'
type MockWatcherProcessor_Filter_Call struct {
	*mock.Call
}

// Filter is a helper method to define mock.On call
//   - ctx context.Context
//   - oldObj *unstructured.Unstructured
//   - newObj *unstructured.Unstructured
func (_e *MockWatcherProcessor_Expecter) Filter(ctx interface{}, oldObj interface{}, newObj interface{}) *MockWatcherProcessor_Filter_Call {
	return &MockWatcherProcessor_Filter_Call{Call: _e.mock.On("Filter", ctx, oldObj, newObj)}
}

func (_c *MockWatcherProcessor_Filter_Call) Run(run func(ctx context.Context, oldObj *unstructured.Unstructured, newObj *unstructured.Unstructured)) *MockWatcherProcessor_Filter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*unstructured.Unstructured), args[2].(*unstructured.Unstructured))
	})
	return _c
}

func (_c *MockWatcherProcessor_Filter_Call) Return(_a0 bool, _a1 error) *MockWatcherProcessor_Filter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWatcherProcessor_Filter_Call) RunAndReturn(run func(context.Context, *unstructured.Unstructured, *unstructured.Unstructured) (bool, error)) *MockWatcherProcessor_Filter_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: ctx, obj
func (_m *MockWatcherProcessor) Send(ctx context.Context, obj *unstructured.Unstructured) error {
	ret := _m.Called(ctx, obj)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured) error); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWatcherProcessor_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockWatcherProcessor_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - obj *unstructured.Unstructured
func (_e *MockWatcherProcessor_Expecter) Send(ctx interface{}, obj interface{}) *MockWatcherProcessor_Send_Call {
	return &MockWatcherProcessor_Send_Call{Call: _e.mock.On("Send", ctx, obj)}
}

func (_c *MockWatcherProcessor_Send_Call) Run(run func(ctx context.Context, obj *unstructured.Unstructured)) *MockWatcherProcessor_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*unstructured.Unstructured))
	})
	return _c
}

func (_c *MockWatcherProcessor_Send_Call) Return(_a0 error) *MockWatcherProcessor_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatcherProcessor_Send_Call) RunAndReturn(run func(context.Context, *unstructured.Unstructured) error) *MockWatcherProcessor_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWatcherProcessor creates a new instance of MockWatcherProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWatcherProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWatcherProcessor {
	mock := &MockWatcherProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
