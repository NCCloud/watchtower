// Code generated by mockery v2.52.2. DO NOT EDIT.

package pkg

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1alpha2 "github.com/nccloud/watchtower/pkg/apis/v1alpha2"
)

// MockWatcherManager is an autogenerated mock type for the WatcherManager type
type MockWatcherManager struct {
	mock.Mock
}

type MockWatcherManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWatcherManager) EXPECT() *MockWatcherManager_Expecter {
	return &MockWatcherManager_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, watcher
func (_m *MockWatcherManager) Add(ctx context.Context, watcher *v1alpha2.Watcher) {
	_m.Called(ctx, watcher)
}

// MockWatcherManager_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockWatcherManager_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - watcher *v1alpha2.Watcher
func (_e *MockWatcherManager_Expecter) Add(ctx interface{}, watcher interface{}) *MockWatcherManager_Add_Call {
	return &MockWatcherManager_Add_Call{Call: _e.mock.On("Add", ctx, watcher)}
}

func (_c *MockWatcherManager_Add_Call) Run(run func(ctx context.Context, watcher *v1alpha2.Watcher)) *MockWatcherManager_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1alpha2.Watcher))
	})
	return _c
}

func (_c *MockWatcherManager_Add_Call) Return() *MockWatcherManager_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWatcherManager_Add_Call) RunAndReturn(run func(context.Context, *v1alpha2.Watcher)) *MockWatcherManager_Add_Call {
	_c.Run(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, watcher
func (_m *MockWatcherManager) Remove(ctx context.Context, watcher *v1alpha2.Watcher) {
	_m.Called(ctx, watcher)
}

// MockWatcherManager_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockWatcherManager_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - watcher *v1alpha2.Watcher
func (_e *MockWatcherManager_Expecter) Remove(ctx interface{}, watcher interface{}) *MockWatcherManager_Remove_Call {
	return &MockWatcherManager_Remove_Call{Call: _e.mock.On("Remove", ctx, watcher)}
}

func (_c *MockWatcherManager_Remove_Call) Run(run func(ctx context.Context, watcher *v1alpha2.Watcher)) *MockWatcherManager_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1alpha2.Watcher))
	})
	return _c
}

func (_c *MockWatcherManager_Remove_Call) Return() *MockWatcherManager_Remove_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWatcherManager_Remove_Call) RunAndReturn(run func(context.Context, *v1alpha2.Watcher)) *MockWatcherManager_Remove_Call {
	_c.Run(run)
	return _c
}

// NewMockWatcherManager creates a new instance of MockWatcherManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWatcherManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWatcherManager {
	mock := &MockWatcherManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
