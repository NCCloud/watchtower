// Code generated by mockery v2.52.2. DO NOT EDIT.

package cache

import (
	mock "github.com/stretchr/testify/mock"
	cache "k8s.io/client-go/tools/cache"

	time "time"
)

// MockInformer is an autogenerated mock type for the Informer type
type MockInformer struct {
	mock.Mock
}

type MockInformer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInformer) EXPECT() *MockInformer_Expecter {
	return &MockInformer_Expecter{mock: &_m.Mock}
}

// AddEventHandler provides a mock function with given fields: handler
func (_m *MockInformer) AddEventHandler(handler cache.ResourceEventHandler) (cache.ResourceEventHandlerRegistration, error) {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for AddEventHandler")
	}

	var r0 cache.ResourceEventHandlerRegistration
	var r1 error
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandler) (cache.ResourceEventHandlerRegistration, error)); ok {
		return rf(handler)
	}
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandler) cache.ResourceEventHandlerRegistration); ok {
		r0 = rf(handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.ResourceEventHandlerRegistration)
		}
	}

	if rf, ok := ret.Get(1).(func(cache.ResourceEventHandler) error); ok {
		r1 = rf(handler)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInformer_AddEventHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEventHandler'
type MockInformer_AddEventHandler_Call struct {
	*mock.Call
}

// AddEventHandler is a helper method to define mock.On call
//   - handler cache.ResourceEventHandler
func (_e *MockInformer_Expecter) AddEventHandler(handler interface{}) *MockInformer_AddEventHandler_Call {
	return &MockInformer_AddEventHandler_Call{Call: _e.mock.On("AddEventHandler", handler)}
}

func (_c *MockInformer_AddEventHandler_Call) Run(run func(handler cache.ResourceEventHandler)) *MockInformer_AddEventHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cache.ResourceEventHandler))
	})
	return _c
}

func (_c *MockInformer_AddEventHandler_Call) Return(_a0 cache.ResourceEventHandlerRegistration, _a1 error) *MockInformer_AddEventHandler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInformer_AddEventHandler_Call) RunAndReturn(run func(cache.ResourceEventHandler) (cache.ResourceEventHandlerRegistration, error)) *MockInformer_AddEventHandler_Call {
	_c.Call.Return(run)
	return _c
}

// AddEventHandlerWithResyncPeriod provides a mock function with given fields: handler, resyncPeriod
func (_m *MockInformer) AddEventHandlerWithResyncPeriod(handler cache.ResourceEventHandler, resyncPeriod time.Duration) (cache.ResourceEventHandlerRegistration, error) {
	ret := _m.Called(handler, resyncPeriod)

	if len(ret) == 0 {
		panic("no return value specified for AddEventHandlerWithResyncPeriod")
	}

	var r0 cache.ResourceEventHandlerRegistration
	var r1 error
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandler, time.Duration) (cache.ResourceEventHandlerRegistration, error)); ok {
		return rf(handler, resyncPeriod)
	}
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandler, time.Duration) cache.ResourceEventHandlerRegistration); ok {
		r0 = rf(handler, resyncPeriod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.ResourceEventHandlerRegistration)
		}
	}

	if rf, ok := ret.Get(1).(func(cache.ResourceEventHandler, time.Duration) error); ok {
		r1 = rf(handler, resyncPeriod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInformer_AddEventHandlerWithResyncPeriod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEventHandlerWithResyncPeriod'
type MockInformer_AddEventHandlerWithResyncPeriod_Call struct {
	*mock.Call
}

// AddEventHandlerWithResyncPeriod is a helper method to define mock.On call
//   - handler cache.ResourceEventHandler
//   - resyncPeriod time.Duration
func (_e *MockInformer_Expecter) AddEventHandlerWithResyncPeriod(handler interface{}, resyncPeriod interface{}) *MockInformer_AddEventHandlerWithResyncPeriod_Call {
	return &MockInformer_AddEventHandlerWithResyncPeriod_Call{Call: _e.mock.On("AddEventHandlerWithResyncPeriod", handler, resyncPeriod)}
}

func (_c *MockInformer_AddEventHandlerWithResyncPeriod_Call) Run(run func(handler cache.ResourceEventHandler, resyncPeriod time.Duration)) *MockInformer_AddEventHandlerWithResyncPeriod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cache.ResourceEventHandler), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockInformer_AddEventHandlerWithResyncPeriod_Call) Return(_a0 cache.ResourceEventHandlerRegistration, _a1 error) *MockInformer_AddEventHandlerWithResyncPeriod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInformer_AddEventHandlerWithResyncPeriod_Call) RunAndReturn(run func(cache.ResourceEventHandler, time.Duration) (cache.ResourceEventHandlerRegistration, error)) *MockInformer_AddEventHandlerWithResyncPeriod_Call {
	_c.Call.Return(run)
	return _c
}

// AddIndexers provides a mock function with given fields: indexers
func (_m *MockInformer) AddIndexers(indexers cache.Indexers) error {
	ret := _m.Called(indexers)

	if len(ret) == 0 {
		panic("no return value specified for AddIndexers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(cache.Indexers) error); ok {
		r0 = rf(indexers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInformer_AddIndexers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddIndexers'
type MockInformer_AddIndexers_Call struct {
	*mock.Call
}

// AddIndexers is a helper method to define mock.On call
//   - indexers cache.Indexers
func (_e *MockInformer_Expecter) AddIndexers(indexers interface{}) *MockInformer_AddIndexers_Call {
	return &MockInformer_AddIndexers_Call{Call: _e.mock.On("AddIndexers", indexers)}
}

func (_c *MockInformer_AddIndexers_Call) Run(run func(indexers cache.Indexers)) *MockInformer_AddIndexers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cache.Indexers))
	})
	return _c
}

func (_c *MockInformer_AddIndexers_Call) Return(_a0 error) *MockInformer_AddIndexers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInformer_AddIndexers_Call) RunAndReturn(run func(cache.Indexers) error) *MockInformer_AddIndexers_Call {
	_c.Call.Return(run)
	return _c
}

// HasSynced provides a mock function with no fields
func (_m *MockInformer) HasSynced() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasSynced")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockInformer_HasSynced_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasSynced'
type MockInformer_HasSynced_Call struct {
	*mock.Call
}

// HasSynced is a helper method to define mock.On call
func (_e *MockInformer_Expecter) HasSynced() *MockInformer_HasSynced_Call {
	return &MockInformer_HasSynced_Call{Call: _e.mock.On("HasSynced")}
}

func (_c *MockInformer_HasSynced_Call) Run(run func()) *MockInformer_HasSynced_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInformer_HasSynced_Call) Return(_a0 bool) *MockInformer_HasSynced_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInformer_HasSynced_Call) RunAndReturn(run func() bool) *MockInformer_HasSynced_Call {
	_c.Call.Return(run)
	return _c
}

// IsStopped provides a mock function with no fields
func (_m *MockInformer) IsStopped() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsStopped")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockInformer_IsStopped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsStopped'
type MockInformer_IsStopped_Call struct {
	*mock.Call
}

// IsStopped is a helper method to define mock.On call
func (_e *MockInformer_Expecter) IsStopped() *MockInformer_IsStopped_Call {
	return &MockInformer_IsStopped_Call{Call: _e.mock.On("IsStopped")}
}

func (_c *MockInformer_IsStopped_Call) Run(run func()) *MockInformer_IsStopped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInformer_IsStopped_Call) Return(_a0 bool) *MockInformer_IsStopped_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInformer_IsStopped_Call) RunAndReturn(run func() bool) *MockInformer_IsStopped_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveEventHandler provides a mock function with given fields: handle
func (_m *MockInformer) RemoveEventHandler(handle cache.ResourceEventHandlerRegistration) error {
	ret := _m.Called(handle)

	if len(ret) == 0 {
		panic("no return value specified for RemoveEventHandler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandlerRegistration) error); ok {
		r0 = rf(handle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInformer_RemoveEventHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveEventHandler'
type MockInformer_RemoveEventHandler_Call struct {
	*mock.Call
}

// RemoveEventHandler is a helper method to define mock.On call
//   - handle cache.ResourceEventHandlerRegistration
func (_e *MockInformer_Expecter) RemoveEventHandler(handle interface{}) *MockInformer_RemoveEventHandler_Call {
	return &MockInformer_RemoveEventHandler_Call{Call: _e.mock.On("RemoveEventHandler", handle)}
}

func (_c *MockInformer_RemoveEventHandler_Call) Run(run func(handle cache.ResourceEventHandlerRegistration)) *MockInformer_RemoveEventHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cache.ResourceEventHandlerRegistration))
	})
	return _c
}

func (_c *MockInformer_RemoveEventHandler_Call) Return(_a0 error) *MockInformer_RemoveEventHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInformer_RemoveEventHandler_Call) RunAndReturn(run func(cache.ResourceEventHandlerRegistration) error) *MockInformer_RemoveEventHandler_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInformer creates a new instance of MockInformer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInformer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInformer {
	mock := &MockInformer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
